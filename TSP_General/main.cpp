#include <iostream>
#include "Location.h"
#include "Map.h"
#include "Individual.h"
#include "Population.h"
#include "SolvProblem.h"

using  namespace std;
int main() {
    srand((unsigned int)time(NULL));
    cout<< RAND_MAX;

    Map map;
    Location loc1(6734, 1453);
    map.AddLocation(loc1);
    Location loc2(2233, 10);
    map.AddLocation(loc2);
    Location loc3(5530, 1424);
    map.AddLocation(loc3);
    Location loc4(401, 841);
    map.AddLocation(loc4);
    Location loc5(3082, 1644);
    map.AddLocation(loc5);
    Location loc6(7608, 4458);
    map.AddLocation(loc6);
    Location loc7(7573, 3716);
    map.AddLocation(loc7);
    Location loc8(7265, 1268);
    map.AddLocation(loc8);
    Location loc9(6898, 1885);
    map.AddLocation(loc9);
    Location loc10(1112, 2049);
    map.AddLocation(loc10);
    Location loc11(5468, 2606);
    map.AddLocation(loc11);
    Location loc12( 5989, 2873);
    map.AddLocation(loc12);
    Location loc13(4706, 2674);
    map.AddLocation(loc13);
    Location loc14(4612, 2035);
    map.AddLocation(loc14);
    Location loc15(6347, 2683);
    map.AddLocation(loc15);
    Location loc16(6107, 669);
    map.AddLocation(loc16);
    Location loc17(7611, 5184);
    map.AddLocation(loc17);
    Location loc18(7462, 3590);
    map.AddLocation(loc18);
    Location loc19(7732, 4723);
    map.AddLocation(loc19);
    Location loc20(5900, 3561);
    map.AddLocation(loc20);
    Location loc21(4483, 3369);
    map.AddLocation(loc21);
    Location loc22(6101, 1110);
    map.AddLocation(loc22);
    Location loc23(5199, 2182);
    map.AddLocation(loc23);
    Location loc24(1633, 2809);
    map.AddLocation(loc24);
    Location loc25(4307, 2322);
    map.AddLocation(loc25);
    Location loc26(675, 1006);
    map.AddLocation(loc26);
    Location loc27(7555, 4819);
    map.AddLocation(loc26);
    Location loc28(7541, 3981);
    map.AddLocation(loc28);
    Location loc29(3177, 756);
    map.AddLocation(loc29);
    Location loc30(7352, 4506);
    map.AddLocation(loc30);
    Location loc31(7545, 2801);
    map.AddLocation(loc31);
    Location loc32(3245, 3305);
    map.AddLocation(loc32);
    Location loc33(6426, 3173);
    map.AddLocation(loc33);
    Location loc34(4608, 1198);
    map.AddLocation(loc34);
    Location loc35(23, 2216);
    map.AddLocation(loc35);
    Location loc36(7248, 3779);
    map.AddLocation(loc36);
    Location loc37(7762, 4595);
    map.AddLocation(loc37);
    Location loc38(7392, 2244);
    map.AddLocation(loc38);
    Location loc39(3484, 2829);
    map.AddLocation(loc39);
    Location loc40(6271, 2135);
    map.AddLocation(loc40);
    Location loc41(4985, 140);
    map.AddLocation(loc41);
    Location loc42(1916, 1569);
    map.AddLocation(loc42);
    Location loc43(7280, 4899);
    map.AddLocation(loc43);
    Location loc44(7509, 3239);
    map.AddLocation(loc44);
    Location loc45(10, 2676);
    map.AddLocation(loc45);
    Location loc46(6807, 2993);
    map.AddLocation(loc46);
    Location loc47(5185, 3258);
    map.AddLocation(loc47);
    Location loc48(3023, 1942);
    map.AddLocation(loc48);

//    Map map;
//    Location loc1(60,200);
//    map.AddLocation(loc1);
//    Location loc2(180,200);
//    map.AddLocation(loc2);
//    Location loc3(80,180);
//    map.AddLocation(loc3);
//    Location loc4(140,180);
//    map.AddLocation(loc4);
//    Location loc5(20,160);
//    map.AddLocation(loc5);
//    Location loc6(100,160);
//    map.AddLocation(loc6);
//    Location loc7(200,160);
//    map.AddLocation(loc7);
//    Location loc8(140,140);
//    map.AddLocation(loc8);
//    Location loc9(40,120);
//    map.AddLocation(loc9);
//    Location loc10(100,120);
//    map.AddLocation(loc10);
//    Location loc11(180,100);
//    map.AddLocation(loc11);
//    Location loc12(60,80);
//    map.AddLocation(loc12);
//    Location loc13(120,80);
//    map.AddLocation(loc13);
//    Location loc14(180,60);
//    map.AddLocation(loc14);
//    Location loc15(20,40);
//    map.AddLocation(loc15);
//    Location loc16(100,40);
//    map.AddLocation(loc16);
//    Location loc17(200,40);
//    map.AddLocation(loc17);
//    Location loc18(20,20);
//    map.AddLocation(loc18);
//    Location loc19(60,20);
//    map.AddLocation(loc19);
//    Location loc20(160,20);
//    map.AddLocation(loc20);


    Population *pop = new Population(150,&map);
    //pop->showPopulation();


    SolvProblem SP = SolvProblem(0.015,5,true,3,pop,&map,1000);
    Individual StartBestInd = pop->GetBestIndividual();
    cout<<"-------Start-------"<<endl;
    clock_t start = clock();
    Individual ind = SP.EvolvePopulation();
    cout<<"Total timp executie:"<<clock()-start/ (double)CLOCKS_PER_SEC<<endl;
    //ind.PrintIndividual();
    cout<< StartBestInd.GetDistance()<<endl;
    cout<< ind.GetDistance();

    return 0;
};